log(6)
log(9)
log(8)
log(7)
log(8)
knitr::opts_chunk$set(echo = TRUE)
bc = boxCox(fit5)
BigMac2003_reduced = BigMac2003[which(!rownames(BigMac2003) %in% c("Nairobi", "Karachi")),]
BigMac2003[,-c("BigMac")]
library(car)
load(file = "FOHF.rda")
library(alr4)
BigMac2003[,-c("BigMac")]
BigMac2003
BigMac2003[,-1]
hist(BigMac2003[,-1])
if (col!="BigMac") hist(BigMac2003[,col])
for (col in colnames(BigMac2003))
if (col!="BigMac") hist(BigMac2003[,col])
if (col!="BigMac") hist(BigMac2003[,col], main = "Histogram of "+col)
for (col in colnames(BigMac2003))
if (col!="BigMac") hist(BigMac2003[,col], main = "Histogram of "+col)
for (col in colnames(BigMac2003))
if (col!="BigMac") hist(BigMac2003[,col], main = paste("Histogram of ",col))
for (col in colnames(BigMac2003))
if (col!="BigMac")
par(mfrow = c(1,2))
hist(BigMac2003[,col], main = paste("Histogram of ",col))
hist(BigMac2003_reduced[,col], main = paste("Histogram of ",col))
BigMac2003_reduced = BigMac2003[which(!rownames(BigMac2003) %in% c("Nairobi", "Karachi")),]
dim(BigMac2003_reduced)
fit5 = lm(BigMac ~ FoodIndex, data = BigMac2003_reduced)
bc = boxCox(fit5)
for (col in colnames(BigMac2003))
if (col!="BigMac")
par(mfrow = c(1,2))
hist(BigMac2003[,col], main = paste("Histogram of ",col))
hist(BigMac2003_reduced[,col], main = paste("Histogram of ",col))
for (col in colnames(BigMac2003))
if (col!="BigMac") {
par(mfrow = c(1,2))
hist(BigMac2003[,col], main = paste("Histogram of ",col))
hist(BigMac2003_reduced[,col], main = paste("Histogram of ",col))
}
for (col in colnames(BigMac2003))
if (col!="BigMac") {
par(mfrow = c(1,2))
hist(BigMac2003[,col], main = paste("Histogram of ",col, " in BigMac2003"))
hist(BigMac2003_reduced[,col], main = paste("Histogram of ",col, " in BigMac2003_reduced"))
}
summary(lm(log(BigMac)~log(Bread) + log(Rice) + log(Bus) + Apt + log(TeachNI), data = BigMac2003_reduced))
install.packages("jtools")
mdl1 = lm(log(BigMac)~log(Bread) + log(Rice), data = BigMac2003_reduced)
loocv.lm <- function(mdl) {
return(mean((residuals(mdl)/(1-hatvalues(mdl)))^2))
}
mdl1 = lm(log(BigMac)~log(Bread) + log(Rice), data = BigMac2003_reduced)
mdl2 = lm(log(BigMac)~log(Bread) + log(Rice) + log(Bus) + Apt, data = BigMac2003_reduced)
mdl3 = lm(log(BigMac)~log(Bread) + log(Rice) + log(Bus) + Apt + log(TeachNI), data = BigMac2003_reduced)
loocv.lm(mdl1)
loocv.lm(mdl2)
loocv.lm(mdl3)
data.frame("Model1" = loocv.lm(mdl1), "Model2" = loocv.lm(mdl2))
loocv.lm <- function(mdl) {
return(mean((residuals(mdl)/(1-hatvalues(mdl)))^2))
}
mdl1 = lm(log(BigMac)~log(Bread) + log(Rice), data = BigMac2003_reduced)
mdl2 = lm(log(BigMac)~log(Bread) + log(Rice) + log(Bus) + Apt, data = BigMac2003_reduced)
mdl3 = lm(log(BigMac)~log(Bread) + log(Rice) + log(Bus) + Apt + log(TeachNI), data = BigMac2003_reduced)
data.frame("Model 1" = loocv.lm(mdl1), "Model 2" = loocv.lm(mdl2), "Model 3" = loocv.lm(mdl3))
plot(mdl2, which = 1)
plot(mdl2, which = 2)
plot(mdl2, which = 3)
plot(mdl2, which = 4)
plot(mdl2, which = 5)
plot(mdl2, which = 6)
plot(mdl2, which = 7)
plot(mdl2, which = 5)
plot(mdl2, which = 4)
plot(mdl2, which = 3)
plot(mdl2, which = 1)
plot(mdl2, which = 2)
plot(mdl2, which = 3)
plot(mdl2, which = 4)
plot(mdl2, which = 5)
qqnorm(mdl2$residuals)
qqline(mdl2$residuals)
cooks.distance(fit3)
fit3 = lm(BigMac ~ FoodIndex, data = BigMac2003)
plot(BigMac ~ FoodIndex, data = BigMac2003)
abline(fit3)
boxCox(fit3, plotit = T)
bc = boxCox(fit3)
bc$x[which.max(bc$y)]
fit4 = lm(BigMac^-0.4646465 ~ FoodIndex, data = BigMac2003)
plot(BigMac^-0.5 ~ FoodIndex, data = BigMac2003)
abline(fit4)
cooks.distance(fit3)
cooks.distance(fit3) > 4/nrows(BigMac2003)
cooks.distance(fit3) > 4/nrow(BigMac2003)
nrow(BigMac2003)
cooks.distance(fit3) > 4/nrow(BigMac2003)
BigMac[which(cooks.distance(fit3) > 4/nrow(BigMac2003)),]
BigMac2003[which(cooks.distance(fit3) > 4/nrow(BigMac2003)),]
cooks.distance(fit3)
cooks.distance(fit3)["Nairobi"]
cooks.distance(fit3)[c("Nairobi", "Hong Kong", "Karachi", "Mumbai", "Tokyo")]
cooks.distance(fit3)[c("Nairobi", "Hong_Kong", "Karachi", "Mumbai", "Tokyo")]
install.packages("brglm")
installr::updateR()
#Analysis Plan:
# â As both sales and costs are quantitative data, we will fit a linear regression model
#   to predict whether there is an effect of cost on EV sales.
# â We will also perform a hypothesis test for the regression coefficient of âcostâ to test
#   whether it is zero, i.e. no significant difference in the sales due to electricity costs.
#--------------------------------------------------------------------------------------------
library(ggplot2)
# Get the dataset --------------------------------------------------------------
input <- read.csv("Hypothesis_1_Dataset.csv")
setwd("D:/MSDS/Winter 2020/Applied Stat & Design/DATA-557-Final-Project/Hypothesis 1")
# Get the dataset --------------------------------------------------------------
input <- read.csv("Hypothesis_1_Dataset.csv")
# Summary statistic-------------------------------------------------------------
summary(input$Electricity_Price)
summary(input$EV_Registration)
summary(input$Group)
summary(input)
population <- read.csv("US_State_Population_2018.csv")
summary(population)
merge(input, population, by=c("US_States","US.State"))
population$
j
merge(input, population, by=c("US_States","US.State"))
?merge
merge(input, population, by.x = input$US_States, by.y = population$US.State)
merge(input, population, by.y = input$US_States, by.x = population$US.State)
merge(input, population, by.x = 'US_States', by.y = 'US.State')
elPrice_EV_data = merge(input, population, by.x = 'US_States', by.y = 'US.State')
summary(elPrice_EV_data)
elPrice_EV_data$EV_by_Population = elPrice_EV_data$EV_Registration/elPrice_EV_data$Population
summary(elPrice_EV_data)
elPrice_EV_data$EV_by_Population = elPrice_EV_data$EV_Registration/elPrice_EV_data$Population*10^5
summary(elPrice_EV_data)
colnames(elPrice_EV_data)
#1 test normalised reg count with electricity price
summary(lm(EV_by_Population~Electricity_Price, data = elPrice_EV_data))
summary(lm(EV_Registration ~ Electricity_Price + Population, data = elPrice_EV_data))
summary(aov(EV_Registration ~ factor(Group), data = input))
summary(aov(EV_by_Population ~ factor(Group), data = input))
summary(aov(EV_by_Population ~ factor(Group), data = elPrice_EV_data))
summary(aov(EV_Registration ~ factor(Group), data = elPrice_EV_data))
# Test effect of electricity price on the EV registration and the normalised EV registration
summary(lm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data))
fit = lm(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
summary(fit)
plot(fit)
plot(fit)
plot(fit)
library(car)
boxCox(fit)
plot(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
fit2 = lm(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
summary(fit2)
summary(lm(EV_Registration ~ Electricity_Price + Population, data = elPrice_EV_data))
boxCox(fit)
boxCox(fit, plotit = F)
boxCox(fit, plotit = F)$y
boxCox(fit, plotit = F)$y[,which.max(boxCox(fit, plotit = F)$x)]
boxCox(fit, plotit = F)$x[,which.max(boxCox(fit, plotit = F)$y)]
boxCox(fit, plotit = F)
bc$x[which.max(bc$y)]
bc = boxCox(fit, plotit = F)
bc$x[which.max(bc$y)]
fit2 = lm(EV_by_Population^-0.1 ~ Electricity_Price, data = elPrice_EV_data)
summary(fit2)
fit2 = lm(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
summary(fit2)
plot(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
plot(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
glm(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data, family = "poisson")
warnings()
anova(glm(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data, family = "poisson"), glm(EV_by_Population ~ 1, data = elPrice_EV_data, family = "poisson"), test = "Chisq")
elPrice_EV_data$EV_by_Population
anova(glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson"), glm(EV_by_Population ~ 1, data = elPrice_EV_data, family = "poisson"), test = "Chisq")
anova(glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson"), glm(EV_Registration ~ 1, data = elPrice_EV_data, family = "poisson"), test = "Chisq")
glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson")
glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson")
anova(glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson"), glm(EV_Registration ~ 1, data = elPrice_EV_data, family = "poisson"), test = "Chisq")
glm.fit = glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson")
plot(glm.fit)
plot(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
plot(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
fit2 = lm(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
abline(fit2)
plot(fit2)
summary(fit2)
# Test effect of electricity price on the EV registration and the normalised EV registration
summary(lm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data))
summary(lm(EV_Registration ~ Electricity_Pricet + Population, data = elPrice_EV_data))
summary(lm(EV_Registration ~ Electricity_Pricet + Population, data = elPrice_EV_data))
# Test effect of electricity price on the EV registration and the normalised EV registration
summary(lm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data))
summary(lm(EV_Registration ~ Electricity_Price + Population, data = elPrice_EV_data))
# Test effect of electricity price on the EV registration and the normalised EV registration
summary(lm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data))
summary(elPrice_EV_data)
fit = lm(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
summary(lm(EV_Registration ~ Electricity_Price + Population, data = elPrice_EV_data))
fit = lm(EV_by_Population ~ Electricity_Price, data = elPrice_EV_data)
summary(fit)
anova(glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson"), glm(EV_Registration ~ 1, data = elPrice_EV_data, family = "poisson"), test = "Chisq")
fit2 = lm(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
plot(fit2)
plot(fit2, which=1)
plot(fit2, which=2)
plot(fit2, which=3)
plot(fit2, which=4)
plot(fit2, which=5)
plot(fit2, which=4)
plot(fit2, which=3)
plot(fit2, which=2)
plot(fit2, which=1)
fit3 = lm(EV_by_Population^-0.1 ~ Electricity_Price, data = elPrice_EV_data)
summary(fit3)
plot(fit3)
write.csv(elPrice_EV_data, "Hypothesis_1_Final_Data.csv")
plot(fit3)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
abline(fit2)
abline(fit1)
abline(fit3)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
abline(fit2)
abline(fit3)
fit3 = lm(EV_by_Population^-0.1 ~ Electricity_Price, data = elPrice_EV_data)
summary(fit3)
plot(fit3)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
abline(fit3)
abline(fit3)
fit3 = lm(EV_by_Population^-0.1 ~ Electricity_Price, data = elPrice_EV_data)
fit2 = lm(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
abline(fit3)
plot(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
abline(fit2)
bc$x[which.max(bc$y)]
fit2 = lm(log(EV_by_Population) ~ Electricity_Price, data = elPrice_EV_data)
summary(fit2)
plot(fit2)
glm.fit = glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson")
anova(glm(EV_Registration ~ Electricity_Price, data = elPrice_EV_data, family = "poisson"), glm(EV_Registration ~ 1, data = elPrice_EV_data, family = "poisson"), test = "Chisq")
install.packages(c("gss", "lmvar", "plotmo"))
